// <auto-generated />
using System;
using EventPlanner.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventPlanner.Migrations
{
    [DbContext(typeof(EventplannerContext))]
    partial class EventplannerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EventPlanner.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryDesc = "Events where music is played for large groups of people to listen.Often takes place outside.",
                            CategoryName = "Concerts"
                        });
                });

            modelBuilder.Entity("EventPlanner.Models.Gathering", b =>
                {
                    b.Property<int>("GatheringId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GatheringId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("GatheringDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("GatheringEnd")
                        .HasColumnType("date");

                    b.Property<string>("GatheringName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateOnly>("GatheringStart")
                        .HasColumnType("date");

                    b.Property<bool>("MinorsAllowed")
                        .HasColumnType("bit");

                    b.HasKey("GatheringId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Gatherings");

                    b.HasData(
                        new
                        {
                            GatheringId = 1,
                            CategoryId = 1,
                            GatheringDesc = "A Concert where big musical stars such as John Christmas play their music for people to enjoy",
                            GatheringEnd = new DateOnly(2024, 12, 27),
                            GatheringName = "Christmas Rock Fest",
                            GatheringStart = new DateOnly(2024, 12, 25),
                            MinorsAllowed = true
                        });
                });

            modelBuilder.Entity("EventPlanner.Models.Registration", b =>
                {
                    b.Property<int>("RegistrationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RegistrationId"));

                    b.Property<int>("GatheringId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RegistrationId");

                    b.HasIndex("GatheringId");

                    b.HasIndex("UserId");

                    b.ToTable("Registrations");
                });

            modelBuilder.Entity("EventPlanner.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "User"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("EventPlanner.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<int>("UserAge")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserRole")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("UserRole");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            UserAge = 18,
                            UserName = "DefaultUser",
                            UserPassword = "123456",
                            UserRole = 1
                        },
                        new
                        {
                            UserId = 2,
                            UserAge = 17,
                            UserName = "DefaultAdmin",
                            UserPassword = "password123",
                            UserRole = 2
                        });
                });

            modelBuilder.Entity("EventPlanner.Models.Gathering", b =>
                {
                    b.HasOne("EventPlanner.Models.Category", "GatheringCategory")
                        .WithMany("Gatherings")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GatheringCategory");
                });

            modelBuilder.Entity("EventPlanner.Models.Registration", b =>
                {
                    b.HasOne("EventPlanner.Models.Gathering", "RegistrationGathering")
                        .WithMany("Registrations")
                        .HasForeignKey("GatheringId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventPlanner.Models.User", "RegistrationOwner")
                        .WithMany("Registrations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegistrationGathering");

                    b.Navigation("RegistrationOwner");
                });

            modelBuilder.Entity("EventPlanner.Models.User", b =>
                {
                    b.HasOne("EventPlanner.Models.Role", "Role")
                        .WithMany("UsersWithRole")
                        .HasForeignKey("UserRole")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("EventPlanner.Models.Category", b =>
                {
                    b.Navigation("Gatherings");
                });

            modelBuilder.Entity("EventPlanner.Models.Gathering", b =>
                {
                    b.Navigation("Registrations");
                });

            modelBuilder.Entity("EventPlanner.Models.Role", b =>
                {
                    b.Navigation("UsersWithRole");
                });

            modelBuilder.Entity("EventPlanner.Models.User", b =>
                {
                    b.Navigation("Registrations");
                });
#pragma warning restore 612, 618
        }
    }
}
